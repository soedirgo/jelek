package jelek.parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;


terminal Integer INTEGER_LITERAL;
terminal String STRING_LITERAL;
terminal LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal COMMA;
terminal CLASS, MAIN;
terminal RETURN;
terminal INT, BOOL, STRING, VOID;
terminal String CNAME, ID;
terminal IF, ELSE, WHILE, READLN, PRINTLN, ASSIGN, DOT;
terminal PLUS, MINUS, STAR, SLASH;
terminal LT, LEQ, GT, GEQ, EQ, NEQ;
terminal NOT, OR, AND;
terminal TRUE, FALSE;
terminal THIS, NEW, NULL;
terminal TEMP;

nonterminal Ast.Program program;
nonterminal Ast.Class main_class, class_;
nonterminal List<Ast.Class> classes;
nonterminal List<Ast.Method> methods;
nonterminal List<Ast.Var> params, params_rest, vars, vars_rest, args, args_rest;
nonterminal Ast.Var var;
nonterminal Ast.Body body;
nonterminal Ast.Type type;
nonterminal String id;
nonterminal Ast.Method method;
nonterminal List<Ast.Stmt> stmts;
nonterminal Ast.Stmt stmt;
nonterminal Ast.Expr expr, bexpr, aexpr, conj, rexpr, bgrd, term, ftr, atom, sexpr;
nonterminal List<Ast.Expr> exprs;
nonterminal Ast.Expr.BinaryOp bop;

program ::= main_class:main classes:classes
            {: RESULT = new Ast.Program(main, classes); :}
            ;

main_class ::= CLASS CNAME:name LBRACE
                   VOID MAIN LPAREN params:params RPAREN body:body
               RBRACE
               {: var method = new Ast.Method("main", new Ast.Type("Void"), params, body);
                  var methods = new LinkedList();
                  methods.add(method);
                  RESULT = new Ast.Class(name, new LinkedList(), methods); :}
               ;

classes ::= classes:classes CLASS CNAME:name LBRACE vars:vars methods:methods RBRACE
            {: var class_ = new Ast.Class(name, vars, methods);
               classes.add(class_);
               RESULT = classes; :}
            |
            {: RESULT = new LinkedList(); :}
            ;

methods ::= type:returnType id:id LPAREN params:params RPAREN body:body methods:methods
            {: var method = new Ast.Method(id,
                                           returnType,
                                           params,
                                           body);
               methods.add(method);
               RESULT = methods; :}
            |
            {: RESULT = new LinkedList(); :}
            ;

params ::= params:params COMMA var:param
           {: params.add(param); RESULT = params; :}
           |
           var:param
           {: var params = new LinkedList(); params.add(param); RESULT = params; :}
           |
           {: RESULT = new LinkedList(); :}
           ;

var ::= type:type id:id
        {: RESULT = new Ast.Var(type, id); :}
        ;

type ::= INT
         {: RESULT = new Ast.Type("Int"); :}
         |
         BOOL
         {: RESULT = new Ast.Type("Bool"); :}
         |
         STRING
         {: RESULT = new Ast.Type("String"); :}
         |
         VOID
         {: RESULT = new Ast.Type("Void"); :}
         |
         CNAME:cname
         {: RESULT = new Ast.Type(cname); :}
         ;

id ::= ID:name
       {: RESULT = name; :}
       |
       MAIN
       {: RESULT = "main"; :}
       ;

body ::= LBRACE vars:vars stmts:stmts stmt:stmt RBRACE
         {: stmts.add(stmt);
            RESULT = new Ast.Body(vars, stmts); :}
         ;

vars ::= vars:vars var:var SEMICOLON
         {: vars.add(var); RESULT = vars; :}
         |
         {: RESULT = new LinkedList(); :}
         ;

stmts ::= stmts:stmts stmt:stmt
          {: stmts.add(stmt); RESULT = stmts; :}
          |
          {: RESULT = new LinkedList(); :}
          ;

stmt ::= IF LPAREN expr:cond RPAREN LBRACE stmts:thenStmts stmt:thenStmt RBRACE
         ELSE LBRACE stmts:elseStmts stmt:elseStmt RBRACE
         {: thenStmts.add(thenStmt);
            elseStmts.add(elseStmt);
            RESULT = new Ast.Stmt.If(cond, thenStmts, elseStmts); :}
         |
         WHILE LPAREN expr:cond RPAREN LBRACE stmts:stmts RBRACE
         {: RESULT = new Ast.Stmt.While(cond, stmts); :}
         |
         READLN LPAREN id:id RPAREN SEMICOLON
         {: RESULT = new Ast.Stmt.Readln(id); :}
         |
         PRINTLN LPAREN expr:expr RPAREN SEMICOLON
         {: RESULT = new Ast.Stmt.Println(expr); :}
         |
         id:id ASSIGN expr:expr SEMICOLON
         {: RESULT = new Ast.Stmt.Assign(id, expr); :}
         |
         atom:atom DOT id:field ASSIGN expr:expr SEMICOLON
         {: RESULT = new Ast.Stmt.FieldAssign(atom, field, expr); :}
         |
         atom:caller LPAREN exprs:args RPAREN SEMICOLON
         {: RESULT = new Ast.Stmt.Call(caller, args); :}
         |
         RETURN expr:expr SEMICOLON
         {: RESULT = new Ast.Stmt.Return(expr); :}
         |
         RETURN SEMICOLON
         {: RESULT = new Ast.Stmt.Return(null); :}
         ;

exprs ::= exprs:exprs COMMA expr:expr
          {: exprs.add(expr); RESULT = exprs; :}
          |
          expr:expr
          {: var exprs = new LinkedList(); exprs.add(expr); RESULT = exprs; :}
          |
          {: RESULT = new LinkedList(); :}
          ;

expr ::= /* bool */
         bexpr:e1 OR conj:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.OR, e1, e2); :}
         |
         conj:e1 AND rexpr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.AND, e1, e2); :}
         |
         aexpr:e1 bop:op aexpr:e2
         {: RESULT = new Ast.Expr.Binary(op, e1, e2); :}
         |
         NOT bgrd:e
         {: RESULT = new Ast.Expr.Unary(Ast.Expr.UnaryOp.NOT, e); :}
         |
         TRUE
         {: RESULT = new Ast.Expr.Bool(true); :}
         |
         FALSE
         {: RESULT = new Ast.Expr.Bool(false); :}

         /* arith */
         |
         aexpr:e1 PLUS term:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.PLUS, e1, e2); :}
         |
         aexpr:e1 MINUS term:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.MINUS, e1, e2); :}
         |
         term:e1 STAR ftr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.STAR, e1, e2); :}
         |
         term:e1 SLASH ftr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.SLASH, e1, e2); :}
         |
         INTEGER_LITERAL:i
         {: RESULT = new Ast.Expr.Int(i); :}
         |
         MINUS ftr:e
         {: RESULT = new Ast.Expr.Unary(Ast.Expr.UnaryOp.NEG, e); :}

         /* string */
         |
         STRING_LITERAL:s
         {: RESULT = new Ast.Expr.Str(s); :}

         /* etc. */
         |
         atom:e
         {: RESULT = e; :}
         ;

bexpr ::= bexpr:e1 OR conj:e2
          {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.AND, e1, e2); :}
          |
          conj:e
          {: RESULT = e; :}
          ;

conj ::= conj:e1 AND rexpr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.AND, e1, e2); :}
         |
         rexpr:e
         {: RESULT = e; :}
         ;

rexpr ::= aexpr:e1 bop:op aexpr:e2
          {: RESULT = new Ast.Expr.Binary(op, e1, e2); :}
          |
          bgrd:e
          {: RESULT = e; :}
          ;

bop ::= LT
        {: RESULT = Ast.Expr.BinaryOp.LT; :}
        |
        GT
        {: RESULT = Ast.Expr.BinaryOp.GT; :}
        |
        LEQ
        {: RESULT = Ast.Expr.BinaryOp.LEQ; :}
        |
        GEQ
        {: RESULT = Ast.Expr.BinaryOp.GEQ; :}
        |
        EQ
        {: RESULT = Ast.Expr.BinaryOp.EQ; :}
        |
        NEQ
        {: RESULT = Ast.Expr.BinaryOp.NEQ; :}
        ;

bgrd ::= NOT bgrd:e
         {: RESULT = new Ast.Expr.Unary(Ast.Expr.UnaryOp.NOT, e); :}
         |
         TRUE
         {: RESULT = new Ast.Expr.Bool(true); :}
         |
         FALSE
         {: RESULT = new Ast.Expr.Bool(false); :}
         |
         atom:e
         {: RESULT = e; :}
         ;

aexpr ::= aexpr:e1 PLUS term:e2
          {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.PLUS, e1, e2); :}
          |
          aexpr:e1 MINUS term:e2
          {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.MINUS, e1, e2); :}
          |
          term:e
          {: RESULT = e; :}
          ;

term ::= term:e1 STAR ftr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.STAR, e1, e2); :}
         |
         term:e1 SLASH ftr:e2
         {: RESULT = new Ast.Expr.Binary(Ast.Expr.BinaryOp.SLASH, e1, e2); :}
         |
         ftr:e
         {: RESULT = e; :}
         ;

ftr ::= INTEGER_LITERAL:i
        {: RESULT = new Ast.Expr.Int(i); :}
        |
        MINUS ftr:e
        {: RESULT = new Ast.Expr.Unary(Ast.Expr.UnaryOp.NEG, e); :}
        |
        atom:e
        {: RESULT = e; :}
        ;

atom ::= atom:atom DOT id:id
         {: RESULT = new Ast.Expr.Dot(atom, id); :}
         |
         atom:atom LPAREN exprs:args RPAREN
         {: RESULT = new Ast.Expr.Call(atom, args); :}
         |
         THIS
         {: RESULT = new Ast.Expr.This(); :}
         |
         id:id
         {: RESULT = new Ast.Expr.Id(id); :}
         |
         NEW CNAME:cname LPAREN RPAREN
         {: RESULT = new Ast.Expr.New(cname); :}
         |
         LPAREN expr:expr RPAREN
         {: RESULT = expr; :}
         |
         NULL
         {: RESULT = new Ast.Expr.Null(); :}
         ;
