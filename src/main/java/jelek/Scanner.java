// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /Users/dan/work/jelek/src/main/jflex/jlite.jflex

package jelek;

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\121\u1100\1\u2900"+
    "\4\u1100\1\u2a00\1\u1100\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00"+
    "\1\u3000\53\u1100\1\u3100\10\u3200\31\u2100\1\u1100\1\u3300\1\u3400"+
    "\1\u1100\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u3c00\1\u3d00\1\u1100\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u2100\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000\1\u2100"+
    "\1\u5100\1\u5200\1\u5300\1\u2100\3\u1100\1\u5400\1\u5500\1\u5600"+
    "\12\u2100\4\u1100\1\u5700\17\u2100\2\u1100\1\u5800\41\u2100\2\u1100"+
    "\1\u5900\1\u5a00\2\u2100\1\u5b00\1\u5c00\27\u1100\1\u5d00\2\u1100"+
    "\1\u5e00\45\u2100\1\u1100\1\u5f00\1\u6000\11\u2100\1\u6100\24\u2100"+
    "\1\u6200\1\u6300\1\u2100\1\u6400\1\u6500\1\u6600\1\u6700\2\u2100"+
    "\1\u6800\5\u2100\1\u6900\1\u6a00\1\u6b00\5\u2100\1\u6c00\1\u6d00"+
    "\4\u2100\1\u6e00\2\u2100\1\u6f00\16\u2100\246\u1100\1\u7000\20\u1100"+
    "\1\u7100\1\u7200\25\u1100\1\u7300\34\u1100\1\u7400\14\u2100\2\u1100"+
    "\1\u7500\u0b06\u2100\1\u2900\u02fe\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\12\20\1\0\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\1\26\6\25\1\27\11\25"+
    "\1\30\2\25\1\31\4\25\1\0\1\32\2\0\1\33"+
    "\1\0\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\35\1\45\1\46\1\47\1\50\1\51"+
    "\1\35\1\52\1\53\1\54\1\55\1\35\1\56\3\35"+
    "\1\57\1\60\1\61\7\0\1\3\32\0\1\1\11\0"+
    "\1\35\12\0\1\35\4\0\1\35\5\0\27\25\1\0"+
    "\7\25\30\35\1\0\10\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\2\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\2\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\2\25\1\35\1\25\1\35\1\25\3\35"+
    "\2\25\1\35\1\25\1\35\2\25\1\35\3\25\2\35"+
    "\4\25\1\35\2\25\1\35\3\25\3\35\2\25\1\35"+
    "\2\25\1\35\1\25\1\35\1\25\1\35\2\25\1\35"+
    "\1\25\2\35\1\25\1\35\2\25\1\35\3\25\1\35"+
    "\1\25\1\35\2\25\2\35\1\33\1\25\3\35\4\33"+
    "\1\25\1\33\1\35\1\25\1\33\1\35\1\25\1\33"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\2\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\2\35\1\25\1\33\1\35\1\25\1\35"+
    "\3\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\7\35\2\25\1\35\2\25\2\35"+
    "\1\25\1\35\4\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\105\35\1\33\44\35\7\33\2\35"+
    "\4\0\14\33\16\0\5\35\7\0\1\33\1\0\1\33"+
    "\21\0\105\33\1\35\52\33\1\25\1\35\1\25\1\35"+
    "\1\33\1\0\1\25\1\35\2\0\4\35\1\0\1\25"+
    "\6\0\1\25\1\0\3\25\1\0\1\25\1\0\2\25"+
    "\1\35\21\25\1\0\11\25\43\35\1\25\2\35\3\25"+
    "\3\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\5\35\1\25\1\35\1\0\1\25\1\35\2\25\2\35"+
    "\63\25\60\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\0\7\33\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\2\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\2\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\0\46\25\2\0\1\33\6\0\51\35"+
    "\10\0\55\33\1\0\1\33\1\0\2\33\1\0\2\33"+
    "\1\0\1\33\10\0\33\33\4\0\4\33\35\0\13\33"+
    "\5\0\100\33\12\20\4\0\146\33\1\0\10\33\2\0"+
    "\12\33\1\0\6\33\12\20\3\33\2\0\1\33\20\0"+
    "\73\33\2\0\145\33\16\0\12\20\54\33\4\0\1\33"+
    "\2\0\1\33\2\0\56\33\22\0\34\33\4\0\13\33"+
    "\65\0\25\33\1\0\10\33\25\0\17\33\1\0\201\33"+
    "\2\0\12\20\1\0\23\33\1\0\10\33\2\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\1\33\3\0\4\33"+
    "\2\0\11\33\2\0\2\33\2\0\4\33\10\0\1\33"+
    "\4\0\2\33\1\0\5\33\2\0\12\20\2\33\12\0"+
    "\1\33\1\0\1\33\2\0\3\33\1\0\6\33\4\0"+
    "\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0"+
    "\2\33\1\0\2\33\2\0\1\33\1\0\5\33\4\0"+
    "\2\33\2\0\3\33\3\0\1\33\7\0\4\33\1\0"+
    "\1\33\7\0\12\20\6\33\13\0\3\33\1\0\11\33"+
    "\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\2\0\12\33\1\0\3\33\1\0\3\33"+
    "\2\0\1\33\17\0\4\33\2\0\12\20\11\0\7\33"+
    "\1\0\3\33\1\0\10\33\2\0\2\33\2\0\26\33"+
    "\1\0\7\33\1\0\2\33\1\0\5\33\2\0\11\33"+
    "\2\0\2\33\2\0\3\33\10\0\2\33\4\0\2\33"+
    "\1\0\5\33\2\0\12\20\1\0\1\33\20\0\2\33"+
    "\1\0\6\33\3\0\3\33\1\0\4\33\3\0\2\33"+
    "\1\0\1\33\1\0\2\33\3\0\2\33\3\0\3\33"+
    "\3\0\14\33\4\0\5\33\3\0\3\33\1\0\4\33"+
    "\2\0\1\33\6\0\1\33\16\0\12\20\20\0\15\33"+
    "\1\0\3\33\1\0\27\33\1\0\20\33\3\0\10\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\1\0\3\33"+
    "\5\0\4\33\2\0\12\20\20\0\4\33\1\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33"+
    "\2\0\11\33\1\0\3\33\1\0\4\33\7\0\2\33"+
    "\7\0\1\33\1\0\4\33\2\0\12\20\1\0\2\33"+
    "\15\0\4\33\1\0\10\33\1\0\3\33\1\0\63\33"+
    "\1\0\3\33\1\0\5\33\5\0\4\33\7\0\5\33"+
    "\2\0\12\20\12\0\6\33\2\0\2\33\1\0\22\33"+
    "\3\0\30\33\1\0\11\33\1\0\1\33\2\0\7\33"+
    "\3\0\1\33\4\0\6\33\1\0\1\33\1\0\10\33"+
    "\6\0\12\20\2\0\2\33\15\0\72\33\5\0\17\33"+
    "\1\0\12\20\47\0\2\33\1\0\1\33\1\0\5\33"+
    "\1\0\30\33\1\0\1\33\1\0\27\33\2\0\5\33"+
    "\1\0\1\33\1\0\6\33\2\0\12\20\2\0\4\33"+
    "\40\0\1\33\27\0\2\33\6\0\12\20\13\0\1\33"+
    "\1\0\1\33\1\0\1\33\4\0\12\33\1\0\44\33"+
    "\4\0\24\33\1\0\22\33\1\0\44\33\11\0\1\33"+
    "\71\0\100\33\12\20\6\0\100\33\12\20\4\33\2\0"+
    "\46\25\1\0\1\25\5\0\1\25\2\0\53\35\1\0"+
    "\1\33\3\35\u0149\33\1\0\4\33\2\0\7\33\1\0"+
    "\1\33\1\0\4\33\2\0\51\33\1\0\4\33\2\0"+
    "\41\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0"+
    "\4\33\2\0\17\33\1\0\71\33\1\0\4\33\2\0"+
    "\103\33\2\0\3\33\40\0\20\33\20\0\126\25\2\0"+
    "\6\35\3\0\u016c\33\2\0\21\33\1\1\32\33\5\0"+
    "\113\33\3\0\13\33\7\0\15\33\1\0\7\33\13\0"+
    "\25\33\13\0\24\33\14\0\15\33\1\0\3\33\1\0"+
    "\2\33\14\0\124\33\3\0\1\33\4\0\2\33\2\0"+
    "\12\20\41\0\3\33\2\0\12\20\6\0\131\33\7\0"+
    "\53\33\5\0\106\33\12\0\37\33\1\0\14\33\4\0"+
    "\14\33\12\0\12\20\36\33\2\0\5\33\13\0\54\33"+
    "\4\0\32\33\6\0\12\20\46\0\34\33\4\0\77\33"+
    "\1\0\35\33\2\0\1\33\12\20\6\0\12\20\15\0"+
    "\1\33\10\0\17\33\101\0\114\33\4\0\12\20\21\0"+
    "\11\33\14\0\60\33\12\20\72\33\14\0\70\33\10\0"+
    "\12\20\3\0\3\33\12\20\44\33\2\0\11\35\7\0"+
    "\53\25\2\0\3\25\20\0\3\33\1\0\47\33\5\0"+
    "\300\35\72\33\1\0\5\33\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\11\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\11\35\10\25\6\35\2\0\6\25"+
    "\2\0\10\35\10\25\10\35\10\25\6\35\2\0\6\25"+
    "\2\0\10\35\1\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\10\35\10\25\16\35\2\0\10\35\10\33"+
    "\10\35\10\33\10\35\10\33\5\35\1\0\2\35\4\25"+
    "\1\33\1\0\1\35\3\0\3\35\1\0\2\35\4\25"+
    "\1\33\3\0\4\35\2\0\2\35\4\25\4\0\10\35"+
    "\5\25\5\0\3\35\1\0\2\35\4\25\1\33\3\0"+
    "\13\1\35\0\2\3\5\0\1\1\17\0\2\33\23\0"+
    "\1\33\12\0\1\1\21\0\1\35\15\0\1\35\20\0"+
    "\15\35\63\0\41\33\21\0\1\25\4\0\1\25\2\0"+
    "\1\35\3\25\2\35\3\25\1\35\1\0\1\25\3\0"+
    "\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\4\25\1\0\1\35\4\25\1\35\4\33\1\35\2\0"+
    "\2\35\2\25\5\0\1\25\4\35\4\0\1\35\21\0"+
    "\20\25\20\35\3\33\1\25\1\35\4\33\u022d\0\32\25"+
    "\32\35\26\0\57\25\1\0\57\35\1\0\1\25\1\35"+
    "\3\25\2\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\4\25\1\35\1\25\2\35\1\25\10\35\3\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\2\35\6\0\1\25\1\35\1\25\1\35\3\33"+
    "\1\25\1\35\14\0\46\35\1\0\1\35\5\0\1\35"+
    "\2\0\70\33\7\0\1\33\17\0\30\33\11\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\7\33\1\0\40\33"+
    "\57\0\1\33\320\0\1\1\4\0\3\33\31\0\17\33"+
    "\1\0\5\33\2\0\5\33\4\0\126\33\2\0\2\33"+
    "\2\0\3\33\1\0\132\33\1\0\4\33\5\0\53\33"+
    "\1\0\136\33\21\0\33\33\65\0\306\33\112\0\360\33"+
    "\20\0\215\33\103\0\56\33\2\0\15\33\3\0\20\33"+
    "\12\20\2\33\24\0\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\5\33\1\0\12\33\1\0\1\33\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\3\35\124\33\45\0\11\33\2\0\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\3\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\25\12\35\1\25\1\35\1\25\1\35\2\25\1\35"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\1\25\1\35"+
    "\1\33\2\0\1\25\1\35\1\25\1\35\1\33\1\25"+
    "\1\35\1\25\3\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\1\25\1\35\5\25"+
    "\1\35\5\25\1\35\1\25\1\35\1\25\1\35\1\25"+
    "\1\35\1\25\1\35\1\25\1\35\2\0\1\25\1\35"+
    "\3\25\60\0\1\33\3\35\55\33\30\0\64\33\14\0"+
    "\106\33\12\0\12\20\6\0\30\33\3\0\1\33\1\0"+
    "\3\33\12\20\44\33\2\0\44\33\14\0\35\33\3\0"+
    "\101\33\16\0\1\33\12\20\6\0\20\33\12\20\5\33"+
    "\1\0\67\33\11\0\16\33\2\0\12\20\6\0\27\33"+
    "\3\0\111\33\30\0\3\33\2\0\20\33\2\0\5\33"+
    "\12\0\6\33\2\0\6\33\2\0\6\33\11\0\7\33"+
    "\1\0\7\33\1\0\53\35\1\0\14\35\10\0\120\35"+
    "\53\33\1\0\2\33\2\0\12\20\6\0\244\33\14\0"+
    "\27\33\4\0\61\33\4\0\u0100\62\156\33\2\0\152\33"+
    "\46\0\7\35\14\0\5\35\5\0\14\33\1\0\15\33"+
    "\1\0\5\33\1\0\1\33\1\0\2\33\1\0\2\33"+
    "\1\0\154\33\41\0\153\33\22\0\100\33\2\0\66\33"+
    "\50\0\14\33\4\0\20\33\20\0\20\33\3\0\2\33"+
    "\30\0\3\33\40\0\5\33\1\0\207\33\23\0\12\20"+
    "\7\0\32\25\4\0\1\33\1\0\32\35\13\0\131\33"+
    "\3\0\6\33\2\0\6\33\2\0\6\33\2\0\3\33"+
    "\43\0\14\33\1\0\32\33\1\0\23\33\1\0\2\33"+
    "\1\0\17\33\2\0\16\33\42\0\173\33\105\0\65\33"+
    "\210\0\1\33\202\0\35\33\3\0\61\33\17\0\1\33"+
    "\37\0\40\33\15\0\36\33\5\0\53\33\5\0\36\33"+
    "\2\0\44\33\4\0\10\33\1\0\5\33\52\0\50\25"+
    "\50\35\116\33\2\0\12\20\6\0\44\25\4\0\44\35"+
    "\4\0\50\33\10\0\64\33\234\0\67\33\11\0\26\33"+
    "\12\0\10\33\230\0\6\33\2\0\1\33\1\0\54\33"+
    "\1\0\2\33\3\0\1\33\2\0\27\33\12\0\27\33"+
    "\11\0\37\33\101\0\23\33\1\0\2\33\12\0\26\33"+
    "\12\0\32\33\106\0\70\33\6\0\2\33\100\0\4\33"+
    "\1\0\2\33\5\0\10\33\1\0\3\33\1\0\35\33"+
    "\2\0\3\33\4\0\1\33\40\0\35\33\3\0\35\33"+
    "\43\0\10\33\1\0\36\33\31\0\66\33\12\0\26\33"+
    "\12\0\23\33\15\0\22\33\156\0\111\33\67\0\63\25"+
    "\15\0\63\35\15\0\50\33\10\0\12\20\306\0\35\33"+
    "\12\0\1\33\10\0\41\33\217\0\27\33\11\0\107\33"+
    "\37\0\12\20\17\0\74\33\25\0\31\33\7\0\12\20"+
    "\6\0\65\33\1\0\12\20\4\0\3\33\11\0\44\33"+
    "\2\0\1\33\11\0\105\33\4\0\4\33\3\0\12\20"+
    "\1\33\1\0\1\33\43\0\22\33\1\0\45\33\6\0"+
    "\1\33\101\0\7\33\1\0\1\33\1\0\4\33\1\0"+
    "\17\33\1\0\12\33\7\0\73\33\5\0\12\20\6\0"+
    "\4\33\1\0\10\33\2\0\2\33\2\0\26\33\1\0"+
    "\7\33\1\0\2\33\1\0\5\33\1\0\12\33\2\0"+
    "\2\33\2\0\3\33\2\0\1\33\6\0\1\33\5\0"+
    "\7\33\2\0\7\33\3\0\5\33\213\0\113\33\5\0"+
    "\12\20\4\0\2\33\40\0\106\33\1\0\1\33\10\0"+
    "\12\20\246\0\66\33\2\0\11\33\27\0\6\33\42\0"+
    "\101\33\3\0\1\33\13\0\12\20\46\0\71\33\7\0"+
    "\12\20\66\0\33\33\2\0\17\33\4\0\12\20\306\0"+
    "\73\33\145\0\40\25\40\35\12\20\25\0\1\33\240\0"+
    "\10\33\2\0\56\33\2\0\10\33\1\0\2\33\33\0"+
    "\77\33\10\0\1\33\10\0\112\33\3\0\1\33\42\0"+
    "\71\33\7\0\11\33\1\0\55\33\1\0\11\33\17\0"+
    "\12\20\30\0\36\33\2\0\26\33\1\0\16\33\111\0"+
    "\7\33\1\0\2\33\1\0\54\33\3\0\1\33\1\0"+
    "\2\33\1\0\11\33\10\0\12\20\6\0\6\33\1\0"+
    "\2\33\1\0\45\33\1\0\2\33\1\0\6\33\7\0"+
    "\12\20\u0136\0\27\33\11\0\232\33\146\0\157\33\21\0"+
    "\304\33\274\0\57\33\321\0\107\33\271\0\71\33\7\0"+
    "\37\33\1\0\12\20\146\0\36\33\2\0\5\33\13\0"+
    "\67\33\11\0\4\33\14\0\12\20\11\0\25\33\5\0"+
    "\23\33\260\0\40\25\40\35\200\0\113\33\4\0\71\33"+
    "\7\0\21\33\100\0\2\33\1\0\1\33\34\0\370\33"+
    "\10\0\363\33\15\0\37\33\61\0\3\33\21\0\4\33"+
    "\10\0\u018c\33\4\0\153\33\5\0\15\33\3\0\11\33"+
    "\7\0\12\33\3\0\2\33\306\0\5\33\3\0\6\33"+
    "\10\0\10\33\2\0\7\33\36\0\4\33\224\0\3\33"+
    "\273\0\32\25\32\35\32\25\7\35\1\0\22\35\32\25"+
    "\32\35\1\25\1\0\2\25\2\0\1\25\2\0\2\25"+
    "\2\0\4\25\1\0\10\25\4\35\1\0\1\35\1\0"+
    "\7\35\1\0\13\35\32\25\32\35\2\25\1\0\4\25"+
    "\2\0\10\25\1\0\7\25\1\0\32\35\2\25\1\0"+
    "\4\25\1\0\5\25\1\0\1\25\3\0\7\25\1\0"+
    "\32\35\32\25\32\35\32\25\32\35\32\25\32\35\32\25"+
    "\32\35\32\25\32\35\32\25\34\35\2\0\31\25\1\0"+
    "\31\35\1\0\6\35\31\25\1\0\31\35\1\0\6\35"+
    "\31\25\1\0\31\35\1\0\6\35\31\25\1\0\31\35"+
    "\1\0\6\35\31\25\1\0\31\35\1\0\6\35\1\25"+
    "\1\35\2\0\62\20\67\33\4\0\62\33\10\0\1\33"+
    "\16\0\1\33\26\0\5\33\1\0\17\33\120\0\7\33"+
    "\1\0\21\33\2\0\7\33\1\0\2\33\1\0\5\33"+
    "\325\0\55\33\3\0\16\33\2\0\12\20\4\0\1\33"+
    "\u0171\0\60\33\12\20\6\0\305\33\13\0\7\33\51\0"+
    "\42\25\42\35\10\33\4\0\12\20\246\0\4\33\1\0"+
    "\33\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0"+
    "\12\33\1\0\4\33\1\0\1\33\1\0\1\33\6\0"+
    "\1\33\4\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\3\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\2\33\1\0\1\33\2\0\4\33\1\0\7\33\1\0"+
    "\4\33\1\0\4\33\1\0\1\33\1\0\12\33\1\0"+
    "\21\33\5\0\3\33\1\0\5\33\1\0\21\33\164\0"+
    "\32\25\6\0\32\25\6\0\32\25\166\0\327\33\51\0"+
    "\65\33\13\0\336\33\2\0\u0182\33\16\0\u0131\33\37\0"+
    "\36\33\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\5\21\12\22\1\23\1\1\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\0\1\2\1\32\1\33"+
    "\1\34\4\21\2\22\1\35\7\22\1\36\1\37\1\40"+
    "\1\41\1\42\2\0\1\2\1\21\1\43\2\21\3\22"+
    "\1\44\6\22\1\0\1\45\1\21\1\46\1\22\1\47"+
    "\1\50\1\51\3\22\1\52\1\22\1\21\1\53\3\22"+
    "\1\54\1\55\1\22\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\146\0\231\0\314\0\146\0\146"+
    "\0\146\0\146\0\146\0\146\0\146\0\377\0\u0132\0\146"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\146\0\u04fb\0\146\0\u052e\0\146\0\u0561"+
    "\0\146\0\146\0\u0594\0\u05c7\0\146\0\146\0\146\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u02fd\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\146\0\146\0\146"+
    "\0\146\0\146\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u01fe\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u02fd\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u01fe\0\u0bc1\0\u01fe\0\u0bf4"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u0c27\0\u0c5a\0\u0c8d\0\u02fd\0\u0cc0"+
    "\0\u0cf3\0\u02fd\0\u0d26\0\u0d59\0\u0d8c\0\u02fd\0\u01fe\0\u0dbf"+
    "\0\u02fd\0\u02fd\0\u02fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\3"+
    "\2\31\1\32\1\31\1\33\3\31\1\34\1\31\1\35"+
    "\1\36\1\31\1\37\1\40\1\31\1\41\1\31\1\42"+
    "\1\43\1\44\1\45\1\3\2\46\1\3\1\46\1\3"+
    "\1\46\1\47\23\46\1\50\30\46\106\0\1\51\46\0"+
    "\1\52\65\0\1\53\4\0\1\54\63\0\1\17\65\0"+
    "\1\55\62\0\1\56\62\0\1\57\57\0\1\24\4\0"+
    "\5\24\1\0\24\24\24\0\1\24\4\0\5\24\1\0"+
    "\15\24\1\60\6\24\24\0\1\24\4\0\5\24\1\0"+
    "\14\24\1\61\7\24\24\0\1\24\4\0\5\24\1\0"+
    "\21\24\1\62\2\24\24\0\1\24\4\0\5\24\1\0"+
    "\15\24\1\63\6\24\24\0\1\31\4\0\5\31\1\0"+
    "\24\31\24\0\1\31\4\0\5\31\1\0\12\31\1\64"+
    "\11\31\24\0\1\31\4\0\5\31\1\0\12\31\1\65"+
    "\11\31\24\0\1\31\4\0\5\31\1\0\6\31\1\66"+
    "\15\31\24\0\1\31\4\0\5\31\1\0\1\31\1\67"+
    "\22\31\24\0\1\31\4\0\5\31\1\0\5\31\1\70"+
    "\14\31\1\71\1\31\24\0\1\31\4\0\5\31\1\0"+
    "\17\31\1\72\4\31\24\0\1\31\4\0\5\31\1\0"+
    "\5\31\1\73\16\31\24\0\1\31\4\0\5\31\1\0"+
    "\10\31\1\74\13\31\24\0\1\31\4\0\5\31\1\0"+
    "\10\31\1\75\13\31\64\0\1\76\2\0\2\46\1\0"+
    "\1\46\1\0\1\46\1\0\23\46\1\0\30\46\6\0"+
    "\1\77\40\0\1\100\2\0\1\101\1\0\1\102\6\0"+
    "\12\103\1\104\50\103\2\54\2\4\1\105\55\54\21\0"+
    "\1\24\4\0\5\24\1\0\15\24\1\106\6\24\24\0"+
    "\1\24\4\0\5\24\1\0\21\24\1\107\2\24\24\0"+
    "\1\24\4\0\5\24\1\0\17\24\1\110\4\24\24\0"+
    "\1\24\4\0\5\24\1\0\11\24\1\111\12\24\24\0"+
    "\1\31\4\0\5\31\1\0\1\31\1\112\22\31\24\0"+
    "\1\31\4\0\5\31\1\0\20\31\1\113\3\31\24\0"+
    "\1\31\4\0\5\31\1\0\11\31\1\114\12\31\24\0"+
    "\1\31\4\0\5\31\1\0\23\31\1\115\24\0\1\31"+
    "\4\0\5\31\1\0\12\31\1\116\11\31\24\0\1\31"+
    "\4\0\5\31\1\0\11\31\1\117\12\31\24\0\1\31"+
    "\4\0\5\31\1\0\1\31\1\120\17\31\1\121\2\31"+
    "\24\0\1\31\4\0\5\31\1\0\11\31\1\122\12\31"+
    "\24\0\1\31\4\0\5\31\1\0\11\31\1\123\12\31"+
    "\4\0\12\103\1\124\50\103\12\0\1\104\4\0\1\4"+
    "\45\0\1\4\100\0\1\24\4\0\5\24\1\0\12\24"+
    "\1\125\11\24\24\0\1\24\4\0\5\24\1\0\11\24"+
    "\1\126\12\24\24\0\1\24\4\0\5\24\1\0\4\24"+
    "\1\127\17\24\24\0\1\31\4\0\5\31\1\0\20\31"+
    "\1\130\3\31\24\0\1\31\4\0\5\31\1\0\5\31"+
    "\1\131\16\31\24\0\1\31\4\0\5\31\1\0\14\31"+
    "\1\132\7\31\24\0\1\31\4\0\5\31\1\0\12\31"+
    "\1\133\11\31\24\0\1\31\4\0\5\31\1\0\14\31"+
    "\1\134\7\31\24\0\1\31\4\0\5\31\1\0\4\31"+
    "\1\135\17\31\24\0\1\31\4\0\5\31\1\0\22\31"+
    "\1\136\1\31\24\0\1\31\4\0\5\31\1\0\20\31"+
    "\1\137\3\31\24\0\1\31\4\0\5\31\1\0\12\31"+
    "\1\140\11\31\4\0\12\103\1\124\4\103\1\4\43\103"+
    "\20\0\1\24\4\0\5\24\1\0\14\24\1\141\7\24"+
    "\24\0\1\31\4\0\5\31\1\0\20\31\1\142\3\31"+
    "\24\0\1\31\4\0\5\31\1\0\21\31\1\143\2\31"+
    "\24\0\1\31\4\0\5\31\1\0\12\31\1\144\11\31"+
    "\24\0\1\31\4\0\5\31\1\0\17\31\1\145\4\31"+
    "\24\0\1\31\4\0\5\31\1\0\5\31\1\146\16\31"+
    "\24\0\1\24\4\0\5\24\1\0\7\24\1\147\14\24"+
    "\24\0\1\31\4\0\5\31\1\0\12\31\1\150\11\31"+
    "\24\0\1\31\4\0\5\31\1\0\14\31\1\151\7\31"+
    "\24\0\1\31\4\0\5\31\1\0\14\31\1\152\7\31"+
    "\24\0\1\31\4\0\5\31\1\0\14\31\1\153\7\31"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3570];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\7\11\2\1\1\11\22\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\1\0\1\1"+
    "\3\11\16\1\5\11\2\0\17\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer sb = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline + 1, yycolumn + 1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline + 1, yycolumn + 1, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \"" + yytext() +
                                 "\" at line " + (yyline+1) + ", column " + (yycolumn+1));
            }
            // fall through
          case 49: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 50: break;
          case 3:
            { return symbol(sym.NOT);
            }
            // fall through
          case 51: break;
          case 4:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 52: break;
          case 5:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 53: break;
          case 6:
            { return symbol(sym.STAR);
            }
            // fall through
          case 54: break;
          case 7:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 55: break;
          case 8:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 56: break;
          case 9:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 57: break;
          case 10:
            { return symbol(sym.DOT);
            }
            // fall through
          case 58: break;
          case 11:
            { return symbol(sym.SLASH);
            }
            // fall through
          case 59: break;
          case 12:
            { return symbol(sym.INTEGER_LITERAL, Integer.parseInt(yytext()));
            }
            // fall through
          case 60: break;
          case 13:
            { return symbol(sym.SEMICOLON);
            }
            // fall through
          case 61: break;
          case 14:
            { return symbol(sym.LT);
            }
            // fall through
          case 62: break;
          case 15:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 63: break;
          case 16:
            { return symbol(sym.GT);
            }
            // fall through
          case 64: break;
          case 17:
            { return symbol(sym.CNAME, yytext());
            }
            // fall through
          case 65: break;
          case 18:
            { return symbol(sym.ID, yytext());
            }
            // fall through
          case 66: break;
          case 19:
            { return symbol(sym.LBRACE);
            }
            // fall through
          case 67: break;
          case 20:
            { return symbol(sym.RBRACE);
            }
            // fall through
          case 68: break;
          case 21:
            { sb.append( yytext() );
            }
            // fall through
          case 69: break;
          case 22:
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL,
                                   sb.toString());
            }
            // fall through
          case 70: break;
          case 23:
            { sb.append('\\');
            }
            // fall through
          case 71: break;
          case 24:
            { return symbol(sym.NEQ);
            }
            // fall through
          case 72: break;
          case 25:
            { return symbol(sym.AND);
            }
            // fall through
          case 73: break;
          case 26:
            { return symbol(sym.LEQ);
            }
            // fall through
          case 74: break;
          case 27:
            { return symbol(sym.EQ);
            }
            // fall through
          case 75: break;
          case 28:
            { return symbol(sym.GEQ);
            }
            // fall through
          case 76: break;
          case 29:
            { return symbol(sym.IF);
            }
            // fall through
          case 77: break;
          case 30:
            { return symbol(sym.OR);
            }
            // fall through
          case 78: break;
          case 31:
            { sb.append('\"');
            }
            // fall through
          case 79: break;
          case 32:
            { sb.append('\n');
            }
            // fall through
          case 80: break;
          case 33:
            { sb.append('\r');
            }
            // fall through
          case 81: break;
          case 34:
            { sb.append('\t');
            }
            // fall through
          case 82: break;
          case 35:
            { return symbol(sym.INT);
            }
            // fall through
          case 83: break;
          case 36:
            { return symbol(sym.NEW);
            }
            // fall through
          case 84: break;
          case 37:
            { return symbol(sym.BOOL);
            }
            // fall through
          case 85: break;
          case 38:
            { return symbol(sym.VOID);
            }
            // fall through
          case 86: break;
          case 39:
            { return symbol(sym.ELSE);
            }
            // fall through
          case 87: break;
          case 40:
            { return symbol(sym.MAIN);
            }
            // fall through
          case 88: break;
          case 41:
            { return symbol(sym.NULL);
            }
            // fall through
          case 89: break;
          case 42:
            { return symbol(sym.THIS);
            }
            // fall through
          case 90: break;
          case 43:
            { return symbol(sym.CLASS);
            }
            // fall through
          case 91: break;
          case 44:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 92: break;
          case 45:
            { return symbol(sym.STRING);
            }
            // fall through
          case 93: break;
          case 46:
            { return symbol(sym.READLN);
            }
            // fall through
          case 94: break;
          case 47:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 95: break;
          case 48:
            { return symbol(sym.PRINTLN);
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
